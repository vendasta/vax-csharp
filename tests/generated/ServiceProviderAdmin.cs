// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sso/v1/service_provider_admin.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sso.V1 {

  /// <summary>Holder for reflection information generated from sso/v1/service_provider_admin.proto</summary>
  public static partial class ServiceProviderAdminReflection {

    #region Descriptor
    /// <summary>File descriptor for sso/v1/service_provider_admin.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceProviderAdminReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNzc28vdjEvc2VydmljZV9wcm92aWRlcl9hZG1pbi5wcm90bxIGc3NvLnYx",
            "IpEBChVTZXJ2aWNlUHJvdmlkZXJDb25maWcSGwoTc2VydmljZV9wcm92aWRl",
            "cl9pZBgBIAEoCRIRCgllbnRyeV91cmwYAiABKAkSEwoLc2Vzc2lvbl91cmwY",
            "AyABKAkSFgoOcHJpbWFyeV9kb21haW4YBCABKAkSGwoTYWx0ZXJuYXRpdmVf",
            "ZG9tYWlucxgFIAMoCSJXChxDcmVhdGVTZXJ2aWNlUHJvdmlkZXJSZXF1ZXN0",
            "EjcKEHNlcnZpY2VfcHJvdmlkZXIYASABKAsyHS5zc28udjEuU2VydmljZVBy",
            "b3ZpZGVyQ29uZmlnIjgKGUdldFNlcnZpY2VQcm92aWRlclJlcXVlc3QSGwoT",
            "c2VydmljZV9wcm92aWRlcl9pZBgBIAEoCSJVChpHZXRTZXJ2aWNlUHJvdmlk",
            "ZXJSZXNwb25zZRI3ChBzZXJ2aWNlX3Byb3ZpZGVyGAEgASgLMh0uc3NvLnYx",
            "LlNlcnZpY2VQcm92aWRlckNvbmZpZyJXChxVcGRhdGVTZXJ2aWNlUHJvdmlk",
            "ZXJSZXF1ZXN0EjcKEHNlcnZpY2VfcHJvdmlkZXIYASABKAsyHS5zc28udjEu",
            "U2VydmljZVByb3ZpZGVyQ29uZmlnIjsKHERlbGV0ZVNlcnZpY2VQcm92aWRl",
            "clJlcXVlc3QSGwoTc2VydmljZV9wcm92aWRlcl9pZBgBIAEoCUIrChNjb20u",
            "dmVuZGFzdGEuc3NvLnYxQhRTZXJ2aWNlUHJvdmlkZXJBZG1pbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.ServiceProviderConfig), global::Sso.V1.ServiceProviderConfig.Parser, new[]{ "ServiceProviderId", "EntryUrl", "SessionUrl", "PrimaryDomain", "AlternativeDomains" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.CreateServiceProviderRequest), global::Sso.V1.CreateServiceProviderRequest.Parser, new[]{ "ServiceProvider" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.GetServiceProviderRequest), global::Sso.V1.GetServiceProviderRequest.Parser, new[]{ "ServiceProviderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.GetServiceProviderResponse), global::Sso.V1.GetServiceProviderResponse.Parser, new[]{ "ServiceProvider" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.UpdateServiceProviderRequest), global::Sso.V1.UpdateServiceProviderRequest.Parser, new[]{ "ServiceProvider" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.DeleteServiceProviderRequest), global::Sso.V1.DeleteServiceProviderRequest.Parser, new[]{ "ServiceProviderId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ServiceProviderConfig : pb::IMessage<ServiceProviderConfig> {
    private static readonly pb::MessageParser<ServiceProviderConfig> _parser = new pb::MessageParser<ServiceProviderConfig>(() => new ServiceProviderConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceProviderConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sso.V1.ServiceProviderAdminReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceProviderConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceProviderConfig(ServiceProviderConfig other) : this() {
      serviceProviderId_ = other.serviceProviderId_;
      entryUrl_ = other.entryUrl_;
      sessionUrl_ = other.sessionUrl_;
      primaryDomain_ = other.primaryDomain_;
      alternativeDomains_ = other.alternativeDomains_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceProviderConfig Clone() {
      return new ServiceProviderConfig(this);
    }

    /// <summary>Field number for the "service_provider_id" field.</summary>
    public const int ServiceProviderIdFieldNumber = 1;
    private string serviceProviderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceProviderId {
      get { return serviceProviderId_; }
      set {
        serviceProviderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entry_url" field.</summary>
    public const int EntryUrlFieldNumber = 2;
    private string entryUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntryUrl {
      get { return entryUrl_; }
      set {
        entryUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_url" field.</summary>
    public const int SessionUrlFieldNumber = 3;
    private string sessionUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionUrl {
      get { return sessionUrl_; }
      set {
        sessionUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_domain" field.</summary>
    public const int PrimaryDomainFieldNumber = 4;
    private string primaryDomain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrimaryDomain {
      get { return primaryDomain_; }
      set {
        primaryDomain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alternative_domains" field.</summary>
    public const int AlternativeDomainsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_alternativeDomains_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> alternativeDomains_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AlternativeDomains {
      get { return alternativeDomains_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceProviderConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceProviderConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceProviderId != other.ServiceProviderId) return false;
      if (EntryUrl != other.EntryUrl) return false;
      if (SessionUrl != other.SessionUrl) return false;
      if (PrimaryDomain != other.PrimaryDomain) return false;
      if(!alternativeDomains_.Equals(other.alternativeDomains_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceProviderId.Length != 0) hash ^= ServiceProviderId.GetHashCode();
      if (EntryUrl.Length != 0) hash ^= EntryUrl.GetHashCode();
      if (SessionUrl.Length != 0) hash ^= SessionUrl.GetHashCode();
      if (PrimaryDomain.Length != 0) hash ^= PrimaryDomain.GetHashCode();
      hash ^= alternativeDomains_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceProviderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceProviderId);
      }
      if (EntryUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EntryUrl);
      }
      if (SessionUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SessionUrl);
      }
      if (PrimaryDomain.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PrimaryDomain);
      }
      alternativeDomains_.WriteTo(output, _repeated_alternativeDomains_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceProviderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceProviderId);
      }
      if (EntryUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntryUrl);
      }
      if (SessionUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionUrl);
      }
      if (PrimaryDomain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrimaryDomain);
      }
      size += alternativeDomains_.CalculateSize(_repeated_alternativeDomains_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceProviderConfig other) {
      if (other == null) {
        return;
      }
      if (other.ServiceProviderId.Length != 0) {
        ServiceProviderId = other.ServiceProviderId;
      }
      if (other.EntryUrl.Length != 0) {
        EntryUrl = other.EntryUrl;
      }
      if (other.SessionUrl.Length != 0) {
        SessionUrl = other.SessionUrl;
      }
      if (other.PrimaryDomain.Length != 0) {
        PrimaryDomain = other.PrimaryDomain;
      }
      alternativeDomains_.Add(other.alternativeDomains_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceProviderId = input.ReadString();
            break;
          }
          case 18: {
            EntryUrl = input.ReadString();
            break;
          }
          case 26: {
            SessionUrl = input.ReadString();
            break;
          }
          case 34: {
            PrimaryDomain = input.ReadString();
            break;
          }
          case 42: {
            alternativeDomains_.AddEntriesFrom(input, _repeated_alternativeDomains_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateServiceProviderRequest : pb::IMessage<CreateServiceProviderRequest> {
    private static readonly pb::MessageParser<CreateServiceProviderRequest> _parser = new pb::MessageParser<CreateServiceProviderRequest>(() => new CreateServiceProviderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateServiceProviderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sso.V1.ServiceProviderAdminReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceProviderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceProviderRequest(CreateServiceProviderRequest other) : this() {
      ServiceProvider = other.serviceProvider_ != null ? other.ServiceProvider.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateServiceProviderRequest Clone() {
      return new CreateServiceProviderRequest(this);
    }

    /// <summary>Field number for the "service_provider" field.</summary>
    public const int ServiceProviderFieldNumber = 1;
    private global::Sso.V1.ServiceProviderConfig serviceProvider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sso.V1.ServiceProviderConfig ServiceProvider {
      get { return serviceProvider_; }
      set {
        serviceProvider_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateServiceProviderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateServiceProviderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServiceProvider, other.ServiceProvider)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serviceProvider_ != null) hash ^= ServiceProvider.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serviceProvider_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServiceProvider);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serviceProvider_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceProvider);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateServiceProviderRequest other) {
      if (other == null) {
        return;
      }
      if (other.serviceProvider_ != null) {
        if (serviceProvider_ == null) {
          serviceProvider_ = new global::Sso.V1.ServiceProviderConfig();
        }
        ServiceProvider.MergeFrom(other.ServiceProvider);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (serviceProvider_ == null) {
              serviceProvider_ = new global::Sso.V1.ServiceProviderConfig();
            }
            input.ReadMessage(serviceProvider_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetServiceProviderRequest : pb::IMessage<GetServiceProviderRequest> {
    private static readonly pb::MessageParser<GetServiceProviderRequest> _parser = new pb::MessageParser<GetServiceProviderRequest>(() => new GetServiceProviderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceProviderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sso.V1.ServiceProviderAdminReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceProviderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceProviderRequest(GetServiceProviderRequest other) : this() {
      serviceProviderId_ = other.serviceProviderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceProviderRequest Clone() {
      return new GetServiceProviderRequest(this);
    }

    /// <summary>Field number for the "service_provider_id" field.</summary>
    public const int ServiceProviderIdFieldNumber = 1;
    private string serviceProviderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceProviderId {
      get { return serviceProviderId_; }
      set {
        serviceProviderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceProviderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceProviderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceProviderId != other.ServiceProviderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceProviderId.Length != 0) hash ^= ServiceProviderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceProviderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceProviderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceProviderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceProviderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceProviderRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceProviderId.Length != 0) {
        ServiceProviderId = other.ServiceProviderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceProviderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetServiceProviderResponse : pb::IMessage<GetServiceProviderResponse> {
    private static readonly pb::MessageParser<GetServiceProviderResponse> _parser = new pb::MessageParser<GetServiceProviderResponse>(() => new GetServiceProviderResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetServiceProviderResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sso.V1.ServiceProviderAdminReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceProviderResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceProviderResponse(GetServiceProviderResponse other) : this() {
      ServiceProvider = other.serviceProvider_ != null ? other.ServiceProvider.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetServiceProviderResponse Clone() {
      return new GetServiceProviderResponse(this);
    }

    /// <summary>Field number for the "service_provider" field.</summary>
    public const int ServiceProviderFieldNumber = 1;
    private global::Sso.V1.ServiceProviderConfig serviceProvider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sso.V1.ServiceProviderConfig ServiceProvider {
      get { return serviceProvider_; }
      set {
        serviceProvider_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetServiceProviderResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetServiceProviderResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServiceProvider, other.ServiceProvider)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serviceProvider_ != null) hash ^= ServiceProvider.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serviceProvider_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServiceProvider);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serviceProvider_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceProvider);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetServiceProviderResponse other) {
      if (other == null) {
        return;
      }
      if (other.serviceProvider_ != null) {
        if (serviceProvider_ == null) {
          serviceProvider_ = new global::Sso.V1.ServiceProviderConfig();
        }
        ServiceProvider.MergeFrom(other.ServiceProvider);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (serviceProvider_ == null) {
              serviceProvider_ = new global::Sso.V1.ServiceProviderConfig();
            }
            input.ReadMessage(serviceProvider_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateServiceProviderRequest : pb::IMessage<UpdateServiceProviderRequest> {
    private static readonly pb::MessageParser<UpdateServiceProviderRequest> _parser = new pb::MessageParser<UpdateServiceProviderRequest>(() => new UpdateServiceProviderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateServiceProviderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sso.V1.ServiceProviderAdminReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateServiceProviderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateServiceProviderRequest(UpdateServiceProviderRequest other) : this() {
      ServiceProvider = other.serviceProvider_ != null ? other.ServiceProvider.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateServiceProviderRequest Clone() {
      return new UpdateServiceProviderRequest(this);
    }

    /// <summary>Field number for the "service_provider" field.</summary>
    public const int ServiceProviderFieldNumber = 1;
    private global::Sso.V1.ServiceProviderConfig serviceProvider_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sso.V1.ServiceProviderConfig ServiceProvider {
      get { return serviceProvider_; }
      set {
        serviceProvider_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateServiceProviderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateServiceProviderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ServiceProvider, other.ServiceProvider)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (serviceProvider_ != null) hash ^= ServiceProvider.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (serviceProvider_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ServiceProvider);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (serviceProvider_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServiceProvider);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateServiceProviderRequest other) {
      if (other == null) {
        return;
      }
      if (other.serviceProvider_ != null) {
        if (serviceProvider_ == null) {
          serviceProvider_ = new global::Sso.V1.ServiceProviderConfig();
        }
        ServiceProvider.MergeFrom(other.ServiceProvider);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (serviceProvider_ == null) {
              serviceProvider_ = new global::Sso.V1.ServiceProviderConfig();
            }
            input.ReadMessage(serviceProvider_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteServiceProviderRequest : pb::IMessage<DeleteServiceProviderRequest> {
    private static readonly pb::MessageParser<DeleteServiceProviderRequest> _parser = new pb::MessageParser<DeleteServiceProviderRequest>(() => new DeleteServiceProviderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteServiceProviderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sso.V1.ServiceProviderAdminReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceProviderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceProviderRequest(DeleteServiceProviderRequest other) : this() {
      serviceProviderId_ = other.serviceProviderId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteServiceProviderRequest Clone() {
      return new DeleteServiceProviderRequest(this);
    }

    /// <summary>Field number for the "service_provider_id" field.</summary>
    public const int ServiceProviderIdFieldNumber = 1;
    private string serviceProviderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceProviderId {
      get { return serviceProviderId_; }
      set {
        serviceProviderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteServiceProviderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteServiceProviderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceProviderId != other.ServiceProviderId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceProviderId.Length != 0) hash ^= ServiceProviderId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceProviderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceProviderId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceProviderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceProviderId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteServiceProviderRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceProviderId.Length != 0) {
        ServiceProviderId = other.ServiceProviderId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceProviderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
