// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sales_orders/v1/api.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Salesorders.V1 {
  /// <summary>
  /// The service to interact with sales orders
  /// </summary>
  public static partial class SalesOrders
  {
    static readonly string __ServiceName = "salesorders.v1.SalesOrders";

    static readonly grpc::Marshaller<global::Salesorders.V1.CreateSalesOrderRequest> __Marshaller_CreateSalesOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.CreateSalesOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.CreateSalesOrderResponse> __Marshaller_CreateSalesOrderResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.CreateSalesOrderResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.GetSalesOrderRequest> __Marshaller_GetSalesOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.GetSalesOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.GetSalesOrderResponse> __Marshaller_GetSalesOrderResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.GetSalesOrderResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.ListSalesOrderRequest> __Marshaller_ListSalesOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.ListSalesOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.ListSalesOrderResponse> __Marshaller_ListSalesOrderResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.ListSalesOrderResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.ApproveSalesOrderRequest> __Marshaller_ApproveSalesOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.ApproveSalesOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.ApproveSalesOrderResponse> __Marshaller_ApproveSalesOrderResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.ApproveSalesOrderResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.DeclineSalesOrderRequest> __Marshaller_DeclineSalesOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.DeclineSalesOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.DeclineSalesOrderResponse> __Marshaller_DeclineSalesOrderResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.DeclineSalesOrderResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.ActivateProductsRequest> __Marshaller_ActivateProductsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.ActivateProductsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Salesorders.V1.ActivateProductsResponse> __Marshaller_ActivateProductsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Salesorders.V1.ActivateProductsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Salesorders.V1.CreateSalesOrderRequest, global::Salesorders.V1.CreateSalesOrderResponse> __Method_CreateSalesOrder = new grpc::Method<global::Salesorders.V1.CreateSalesOrderRequest, global::Salesorders.V1.CreateSalesOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSalesOrder",
        __Marshaller_CreateSalesOrderRequest,
        __Marshaller_CreateSalesOrderResponse);

    static readonly grpc::Method<global::Salesorders.V1.GetSalesOrderRequest, global::Salesorders.V1.GetSalesOrderResponse> __Method_GetSalesOrder = new grpc::Method<global::Salesorders.V1.GetSalesOrderRequest, global::Salesorders.V1.GetSalesOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSalesOrder",
        __Marshaller_GetSalesOrderRequest,
        __Marshaller_GetSalesOrderResponse);

    static readonly grpc::Method<global::Salesorders.V1.ListSalesOrderRequest, global::Salesorders.V1.ListSalesOrderResponse> __Method_ListSalesOrder = new grpc::Method<global::Salesorders.V1.ListSalesOrderRequest, global::Salesorders.V1.ListSalesOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSalesOrder",
        __Marshaller_ListSalesOrderRequest,
        __Marshaller_ListSalesOrderResponse);

    static readonly grpc::Method<global::Salesorders.V1.ApproveSalesOrderRequest, global::Salesorders.V1.ApproveSalesOrderResponse> __Method_ApproveSalesOrder = new grpc::Method<global::Salesorders.V1.ApproveSalesOrderRequest, global::Salesorders.V1.ApproveSalesOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ApproveSalesOrder",
        __Marshaller_ApproveSalesOrderRequest,
        __Marshaller_ApproveSalesOrderResponse);

    static readonly grpc::Method<global::Salesorders.V1.DeclineSalesOrderRequest, global::Salesorders.V1.DeclineSalesOrderResponse> __Method_DeclineSalesOrder = new grpc::Method<global::Salesorders.V1.DeclineSalesOrderRequest, global::Salesorders.V1.DeclineSalesOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeclineSalesOrder",
        __Marshaller_DeclineSalesOrderRequest,
        __Marshaller_DeclineSalesOrderResponse);

    static readonly grpc::Method<global::Salesorders.V1.ActivateProductsRequest, global::Salesorders.V1.ActivateProductsResponse> __Method_ActivateProducts = new grpc::Method<global::Salesorders.V1.ActivateProductsRequest, global::Salesorders.V1.ActivateProductsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateProducts",
        __Marshaller_ActivateProductsRequest,
        __Marshaller_ActivateProductsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Salesorders.V1.ApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SalesOrders</summary>
    public abstract partial class SalesOrdersBase
    {
      /// <summary>
      /// Create data for a sales order
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Salesorders.V1.CreateSalesOrderResponse> CreateSalesOrder(global::Salesorders.V1.CreateSalesOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get data for a sales order
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Salesorders.V1.GetSalesOrderResponse> GetSalesOrder(global::Salesorders.V1.GetSalesOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List sales orders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Salesorders.V1.ListSalesOrderResponse> ListSalesOrder(global::Salesorders.V1.ListSalesOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Approve a sales order
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Salesorders.V1.ApproveSalesOrderResponse> ApproveSalesOrder(global::Salesorders.V1.ApproveSalesOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Decline a sales order
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Salesorders.V1.DeclineSalesOrderResponse> DeclineSalesOrder(global::Salesorders.V1.DeclineSalesOrderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Activate products in a sales order
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Salesorders.V1.ActivateProductsResponse> ActivateProducts(global::Salesorders.V1.ActivateProductsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SalesOrders</summary>
    public partial class SalesOrdersClient : grpc::ClientBase<SalesOrdersClient>
    {
      /// <summary>Creates a new client for SalesOrders</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SalesOrdersClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SalesOrders that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SalesOrdersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SalesOrdersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SalesOrdersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create data for a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.CreateSalesOrderResponse CreateSalesOrder(global::Salesorders.V1.CreateSalesOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSalesOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create data for a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.CreateSalesOrderResponse CreateSalesOrder(global::Salesorders.V1.CreateSalesOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSalesOrder, null, options, request);
      }
      /// <summary>
      /// Create data for a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.CreateSalesOrderResponse> CreateSalesOrderAsync(global::Salesorders.V1.CreateSalesOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSalesOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create data for a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.CreateSalesOrderResponse> CreateSalesOrderAsync(global::Salesorders.V1.CreateSalesOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSalesOrder, null, options, request);
      }
      /// <summary>
      /// Get data for a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.GetSalesOrderResponse GetSalesOrder(global::Salesorders.V1.GetSalesOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSalesOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get data for a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.GetSalesOrderResponse GetSalesOrder(global::Salesorders.V1.GetSalesOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSalesOrder, null, options, request);
      }
      /// <summary>
      /// Get data for a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.GetSalesOrderResponse> GetSalesOrderAsync(global::Salesorders.V1.GetSalesOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSalesOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get data for a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.GetSalesOrderResponse> GetSalesOrderAsync(global::Salesorders.V1.GetSalesOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSalesOrder, null, options, request);
      }
      /// <summary>
      /// List sales orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.ListSalesOrderResponse ListSalesOrder(global::Salesorders.V1.ListSalesOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSalesOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List sales orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.ListSalesOrderResponse ListSalesOrder(global::Salesorders.V1.ListSalesOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSalesOrder, null, options, request);
      }
      /// <summary>
      /// List sales orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.ListSalesOrderResponse> ListSalesOrderAsync(global::Salesorders.V1.ListSalesOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSalesOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List sales orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.ListSalesOrderResponse> ListSalesOrderAsync(global::Salesorders.V1.ListSalesOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSalesOrder, null, options, request);
      }
      /// <summary>
      /// Approve a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.ApproveSalesOrderResponse ApproveSalesOrder(global::Salesorders.V1.ApproveSalesOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApproveSalesOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Approve a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.ApproveSalesOrderResponse ApproveSalesOrder(global::Salesorders.V1.ApproveSalesOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ApproveSalesOrder, null, options, request);
      }
      /// <summary>
      /// Approve a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.ApproveSalesOrderResponse> ApproveSalesOrderAsync(global::Salesorders.V1.ApproveSalesOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ApproveSalesOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Approve a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.ApproveSalesOrderResponse> ApproveSalesOrderAsync(global::Salesorders.V1.ApproveSalesOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ApproveSalesOrder, null, options, request);
      }
      /// <summary>
      /// Decline a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.DeclineSalesOrderResponse DeclineSalesOrder(global::Salesorders.V1.DeclineSalesOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeclineSalesOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decline a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.DeclineSalesOrderResponse DeclineSalesOrder(global::Salesorders.V1.DeclineSalesOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeclineSalesOrder, null, options, request);
      }
      /// <summary>
      /// Decline a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.DeclineSalesOrderResponse> DeclineSalesOrderAsync(global::Salesorders.V1.DeclineSalesOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeclineSalesOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Decline a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.DeclineSalesOrderResponse> DeclineSalesOrderAsync(global::Salesorders.V1.DeclineSalesOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeclineSalesOrder, null, options, request);
      }
      /// <summary>
      /// Activate products in a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.ActivateProductsResponse ActivateProducts(global::Salesorders.V1.ActivateProductsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateProducts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate products in a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Salesorders.V1.ActivateProductsResponse ActivateProducts(global::Salesorders.V1.ActivateProductsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateProducts, null, options, request);
      }
      /// <summary>
      /// Activate products in a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.ActivateProductsResponse> ActivateProductsAsync(global::Salesorders.V1.ActivateProductsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateProductsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate products in a sales order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Salesorders.V1.ActivateProductsResponse> ActivateProductsAsync(global::Salesorders.V1.ActivateProductsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateProducts, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SalesOrdersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SalesOrdersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SalesOrdersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSalesOrder, serviceImpl.CreateSalesOrder)
          .AddMethod(__Method_GetSalesOrder, serviceImpl.GetSalesOrder)
          .AddMethod(__Method_ListSalesOrder, serviceImpl.ListSalesOrder)
          .AddMethod(__Method_ApproveSalesOrder, serviceImpl.ApproveSalesOrder)
          .AddMethod(__Method_DeclineSalesOrder, serviceImpl.DeclineSalesOrder)
          .AddMethod(__Method_ActivateProducts, serviceImpl.ActivateProducts).Build();
    }

  }
}
#endregion
