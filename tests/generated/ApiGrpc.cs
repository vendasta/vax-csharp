// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sso/v1/api.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Sso.V1 {
  /// <summary>
  /// The Identity Provider service provides RPC's for an identity provider application to complete the session transfer 
  /// process. All RPC's are accessed by an identity provider application, such as VBC, or a partner dashboard.
  /// </summary>
  public static partial class IdentityProvider
  {
    static readonly string __ServiceName = "sso.v1.IdentityProvider";

    static readonly grpc::Marshaller<global::Sso.V1.GetEntryURLRequest> __Marshaller_GetEntryURLRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.GetEntryURLRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sso.V1.GetEntryURLResponse> __Marshaller_GetEntryURLResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.GetEntryURLResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sso.V1.GetEntryURLWithCodeRequest> __Marshaller_GetEntryURLWithCodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.GetEntryURLWithCodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sso.V1.GetEntryURLWithCodeResponse> __Marshaller_GetEntryURLWithCodeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.GetEntryURLWithCodeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sso.V1.LogoutRequest> __Marshaller_LogoutRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.LogoutRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Sso.V1.GetEntryURLRequest, global::Sso.V1.GetEntryURLResponse> __Method_GetEntryURL = new grpc::Method<global::Sso.V1.GetEntryURLRequest, global::Sso.V1.GetEntryURLResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEntryURL",
        __Marshaller_GetEntryURLRequest,
        __Marshaller_GetEntryURLResponse);

    static readonly grpc::Method<global::Sso.V1.GetEntryURLWithCodeRequest, global::Sso.V1.GetEntryURLWithCodeResponse> __Method_GetEntryURLWithCode = new grpc::Method<global::Sso.V1.GetEntryURLWithCodeRequest, global::Sso.V1.GetEntryURLWithCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEntryURLWithCode",
        __Marshaller_GetEntryURLWithCodeRequest,
        __Marshaller_GetEntryURLWithCodeResponse);

    static readonly grpc::Method<global::Sso.V1.LogoutRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Logout = new grpc::Method<global::Sso.V1.LogoutRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Logout",
        __Marshaller_LogoutRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sso.V1.ApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of IdentityProvider</summary>
    public abstract partial class IdentityProviderBase
    {
      /// <summary>
      /// Get the entry URL of a service provider.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Sso.V1.GetEntryURLResponse> GetEntryURL(global::Sso.V1.GetEntryURLRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the entry URL of a service provider with a code that will be exchanged for a user session.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Sso.V1.GetEntryURLWithCodeResponse> GetEntryURLWithCode(global::Sso.V1.GetEntryURLWithCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Logout of the session for a user.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Logout(global::Sso.V1.LogoutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for IdentityProvider</summary>
    public partial class IdentityProviderClient : grpc::ClientBase<IdentityProviderClient>
    {
      /// <summary>Creates a new client for IdentityProvider</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public IdentityProviderClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for IdentityProvider that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public IdentityProviderClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected IdentityProviderClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected IdentityProviderClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get the entry URL of a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sso.V1.GetEntryURLResponse GetEntryURL(global::Sso.V1.GetEntryURLRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntryURL(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the entry URL of a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sso.V1.GetEntryURLResponse GetEntryURL(global::Sso.V1.GetEntryURLRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEntryURL, null, options, request);
      }
      /// <summary>
      /// Get the entry URL of a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sso.V1.GetEntryURLResponse> GetEntryURLAsync(global::Sso.V1.GetEntryURLRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntryURLAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the entry URL of a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sso.V1.GetEntryURLResponse> GetEntryURLAsync(global::Sso.V1.GetEntryURLRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEntryURL, null, options, request);
      }
      /// <summary>
      /// Get the entry URL of a service provider with a code that will be exchanged for a user session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sso.V1.GetEntryURLWithCodeResponse GetEntryURLWithCode(global::Sso.V1.GetEntryURLWithCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntryURLWithCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the entry URL of a service provider with a code that will be exchanged for a user session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sso.V1.GetEntryURLWithCodeResponse GetEntryURLWithCode(global::Sso.V1.GetEntryURLWithCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEntryURLWithCode, null, options, request);
      }
      /// <summary>
      /// Get the entry URL of a service provider with a code that will be exchanged for a user session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sso.V1.GetEntryURLWithCodeResponse> GetEntryURLWithCodeAsync(global::Sso.V1.GetEntryURLWithCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetEntryURLWithCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the entry URL of a service provider with a code that will be exchanged for a user session.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sso.V1.GetEntryURLWithCodeResponse> GetEntryURLWithCodeAsync(global::Sso.V1.GetEntryURLWithCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEntryURLWithCode, null, options, request);
      }
      /// <summary>
      /// Logout of the session for a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Logout(global::Sso.V1.LogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Logout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Logout of the session for a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Logout(global::Sso.V1.LogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Logout, null, options, request);
      }
      /// <summary>
      /// Logout of the session for a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> LogoutAsync(global::Sso.V1.LogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Logout of the session for a user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> LogoutAsync(global::Sso.V1.LogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Logout, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override IdentityProviderClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new IdentityProviderClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(IdentityProviderBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetEntryURL, serviceImpl.GetEntryURL)
          .AddMethod(__Method_GetEntryURLWithCode, serviceImpl.GetEntryURLWithCode)
          .AddMethod(__Method_Logout, serviceImpl.Logout).Build();
    }

  }
  /// <summary>
  /// The Service Provider service provides RPC's for a service provider, such as a marketplace application, to initiate a 
  /// session transfer.
  /// </summary>
  public static partial class ServiceProvider
  {
    static readonly string __ServiceName = "sso.v1.ServiceProvider";

    static readonly grpc::Marshaller<global::Sso.V1.GetSessionTransferURLRequest> __Marshaller_GetSessionTransferURLRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.GetSessionTransferURLRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sso.V1.GetSessionTransferURLResponse> __Marshaller_GetSessionTransferURLResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.GetSessionTransferURLResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Sso.V1.GetSessionTransferURLRequest, global::Sso.V1.GetSessionTransferURLResponse> __Method_GetSessionTransferURL = new grpc::Method<global::Sso.V1.GetSessionTransferURLRequest, global::Sso.V1.GetSessionTransferURLResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSessionTransferURL",
        __Marshaller_GetSessionTransferURLRequest,
        __Marshaller_GetSessionTransferURLResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sso.V1.ApiReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of ServiceProvider</summary>
    public abstract partial class ServiceProviderBase
    {
      /// <summary>
      /// Get the session transfer URL for a given context.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Sso.V1.GetSessionTransferURLResponse> GetSessionTransferURL(global::Sso.V1.GetSessionTransferURLRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ServiceProvider</summary>
    public partial class ServiceProviderClient : grpc::ClientBase<ServiceProviderClient>
    {
      /// <summary>Creates a new client for ServiceProvider</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ServiceProviderClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ServiceProvider that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ServiceProviderClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ServiceProviderClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ServiceProviderClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get the session transfer URL for a given context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sso.V1.GetSessionTransferURLResponse GetSessionTransferURL(global::Sso.V1.GetSessionTransferURLRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionTransferURL(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the session transfer URL for a given context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sso.V1.GetSessionTransferURLResponse GetSessionTransferURL(global::Sso.V1.GetSessionTransferURLRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSessionTransferURL, null, options, request);
      }
      /// <summary>
      /// Get the session transfer URL for a given context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sso.V1.GetSessionTransferURLResponse> GetSessionTransferURLAsync(global::Sso.V1.GetSessionTransferURLRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionTransferURLAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the session transfer URL for a given context.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sso.V1.GetSessionTransferURLResponse> GetSessionTransferURLAsync(global::Sso.V1.GetSessionTransferURLRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSessionTransferURL, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ServiceProviderClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServiceProviderClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ServiceProviderBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetSessionTransferURL, serviceImpl.GetSessionTransferURL).Build();
    }

  }
  /// <summary>
  /// The Service Provider Admin service provides RPC's for managing service providers.
  /// </summary>
  public static partial class ServiceProviderAdmin
  {
    static readonly string __ServiceName = "sso.v1.ServiceProviderAdmin";

    static readonly grpc::Marshaller<global::Sso.V1.CreateServiceProviderRequest> __Marshaller_CreateServiceProviderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.CreateServiceProviderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sso.V1.GetServiceProviderRequest> __Marshaller_GetServiceProviderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.GetServiceProviderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sso.V1.GetServiceProviderResponse> __Marshaller_GetServiceProviderResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.GetServiceProviderResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sso.V1.UpdateServiceProviderRequest> __Marshaller_UpdateServiceProviderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.UpdateServiceProviderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Sso.V1.DeleteServiceProviderRequest> __Marshaller_DeleteServiceProviderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Sso.V1.DeleteServiceProviderRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Sso.V1.CreateServiceProviderRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CreateServiceProvider = new grpc::Method<global::Sso.V1.CreateServiceProviderRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateServiceProvider",
        __Marshaller_CreateServiceProviderRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Sso.V1.GetServiceProviderRequest, global::Sso.V1.GetServiceProviderResponse> __Method_GetServiceProvider = new grpc::Method<global::Sso.V1.GetServiceProviderRequest, global::Sso.V1.GetServiceProviderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetServiceProvider",
        __Marshaller_GetServiceProviderRequest,
        __Marshaller_GetServiceProviderResponse);

    static readonly grpc::Method<global::Sso.V1.UpdateServiceProviderRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_UpdateServiceProvider = new grpc::Method<global::Sso.V1.UpdateServiceProviderRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateServiceProvider",
        __Marshaller_UpdateServiceProviderRequest,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Sso.V1.DeleteServiceProviderRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteServiceProvider = new grpc::Method<global::Sso.V1.DeleteServiceProviderRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteServiceProvider",
        __Marshaller_DeleteServiceProviderRequest,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Sso.V1.ApiReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of ServiceProviderAdmin</summary>
    public abstract partial class ServiceProviderAdminBase
    {
      /// <summary>
      /// Create a service provider.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CreateServiceProvider(global::Sso.V1.CreateServiceProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get a service provider.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Sso.V1.GetServiceProviderResponse> GetServiceProvider(global::Sso.V1.GetServiceProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update a service provider.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> UpdateServiceProvider(global::Sso.V1.UpdateServiceProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a service provider.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceProvider(global::Sso.V1.DeleteServiceProviderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ServiceProviderAdmin</summary>
    public partial class ServiceProviderAdminClient : grpc::ClientBase<ServiceProviderAdminClient>
    {
      /// <summary>Creates a new client for ServiceProviderAdmin</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ServiceProviderAdminClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ServiceProviderAdmin that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ServiceProviderAdminClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ServiceProviderAdminClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ServiceProviderAdminClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateServiceProvider(global::Sso.V1.CreateServiceProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServiceProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CreateServiceProvider(global::Sso.V1.CreateServiceProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateServiceProvider, null, options, request);
      }
      /// <summary>
      /// Create a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateServiceProviderAsync(global::Sso.V1.CreateServiceProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateServiceProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CreateServiceProviderAsync(global::Sso.V1.CreateServiceProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateServiceProvider, null, options, request);
      }
      /// <summary>
      /// Get a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sso.V1.GetServiceProviderResponse GetServiceProvider(global::Sso.V1.GetServiceProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Sso.V1.GetServiceProviderResponse GetServiceProvider(global::Sso.V1.GetServiceProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetServiceProvider, null, options, request);
      }
      /// <summary>
      /// Get a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sso.V1.GetServiceProviderResponse> GetServiceProviderAsync(global::Sso.V1.GetServiceProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetServiceProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Sso.V1.GetServiceProviderResponse> GetServiceProviderAsync(global::Sso.V1.GetServiceProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetServiceProvider, null, options, request);
      }
      /// <summary>
      /// Update a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateServiceProvider(global::Sso.V1.UpdateServiceProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServiceProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty UpdateServiceProvider(global::Sso.V1.UpdateServiceProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateServiceProvider, null, options, request);
      }
      /// <summary>
      /// Update a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateServiceProviderAsync(global::Sso.V1.UpdateServiceProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateServiceProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateServiceProviderAsync(global::Sso.V1.UpdateServiceProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateServiceProvider, null, options, request);
      }
      /// <summary>
      /// Delete a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceProvider(global::Sso.V1.DeleteServiceProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServiceProvider(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteServiceProvider(global::Sso.V1.DeleteServiceProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteServiceProvider, null, options, request);
      }
      /// <summary>
      /// Delete a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceProviderAsync(global::Sso.V1.DeleteServiceProviderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteServiceProviderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a service provider.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteServiceProviderAsync(global::Sso.V1.DeleteServiceProviderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteServiceProvider, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ServiceProviderAdminClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServiceProviderAdminClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ServiceProviderAdminBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateServiceProvider, serviceImpl.CreateServiceProvider)
          .AddMethod(__Method_GetServiceProvider, serviceImpl.GetServiceProvider)
          .AddMethod(__Method_UpdateServiceProvider, serviceImpl.UpdateServiceProvider)
          .AddMethod(__Method_DeleteServiceProvider, serviceImpl.DeleteServiceProvider).Build();
    }

  }
}
#endregion
