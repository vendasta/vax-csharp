// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sso/v1/service_provider.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sso.V1 {

  /// <summary>Holder for reflection information generated from sso/v1/service_provider.proto</summary>
  public static partial class ServiceProviderReflection {

    #region Descriptor
    /// <summary>File descriptor for sso/v1/service_provider.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceProviderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1zc28vdjEvc2VydmljZV9wcm92aWRlci5wcm90bxIGc3NvLnYxIocCCg5T",
            "ZXJ2aWNlQ29udGV4dBIxCgdhY2NvdW50GAEgASgLMh4uc3NvLnYxLlNlcnZp",
            "Y2VDb250ZXh0LkFjY291bnRIABIxCgdwYXJ0bmVyGAIgASgLMh4uc3NvLnYx",
            "LlNlcnZpY2VDb250ZXh0LlBhcnRuZXJIABI4CgtzdXBlcl9hZG1pbhgDIAEo",
            "CzIhLnNzby52MS5TZXJ2aWNlQ29udGV4dC5TdXBlckFkbWluSAAaHQoHQWNj",
            "b3VudBISCgphY2NvdW50X2lkGAEgASgJGh0KB1BhcnRuZXISEgoKcGFydG5l",
            "cl9pZBgBIAEoCRoMCgpTdXBlckFkbWluQgkKB2NvbnRleHQiZAocR2V0U2Vz",
            "c2lvblRyYW5zZmVyVVJMUmVxdWVzdBIbChNzZXJ2aWNlX3Byb3ZpZGVyX2lk",
            "GAEgASgJEicKB2NvbnRleHQYAiABKAsyFi5zc28udjEuU2VydmljZUNvbnRl",
            "eHQiPQodR2V0U2Vzc2lvblRyYW5zZmVyVVJMUmVzcG9uc2USHAoUc2Vzc2lv",
            "bl90cmFuc2Zlcl91cmwYASABKAlCJgoTY29tLnZlbmRhc3RhLnNzby52MUIP",
            "U2VydmljZVByb3ZpZGVyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.ServiceContext), global::Sso.V1.ServiceContext.Parser, new[]{ "Account", "Partner", "SuperAdmin" }, new[]{ "Context" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.ServiceContext.Types.Account), global::Sso.V1.ServiceContext.Types.Account.Parser, new[]{ "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.ServiceContext.Types.Partner), global::Sso.V1.ServiceContext.Types.Partner.Parser, new[]{ "PartnerId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.ServiceContext.Types.SuperAdmin), global::Sso.V1.ServiceContext.Types.SuperAdmin.Parser, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.GetSessionTransferURLRequest), global::Sso.V1.GetSessionTransferURLRequest.Parser, new[]{ "ServiceProviderId", "Context" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sso.V1.GetSessionTransferURLResponse), global::Sso.V1.GetSessionTransferURLResponse.Parser, new[]{ "SessionTransferUrl" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The service context is used to determine which identity provider to use. This context is used in conjunction with
  /// the identity context, provided by the identity provider. The two contexts require domain logic to be glued together; 
  /// for example, when the service provider provides an account, we can determine the partner from that account, then 
  /// match that up to an identity provider Partner context.
  /// </summary>
  public sealed partial class ServiceContext : pb::IMessage<ServiceContext> {
    private static readonly pb::MessageParser<ServiceContext> _parser = new pb::MessageParser<ServiceContext>(() => new ServiceContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sso.V1.ServiceProviderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceContext(ServiceContext other) : this() {
      switch (other.ContextCase) {
        case ContextOneofCase.Account:
          Account = other.Account.Clone();
          break;
        case ContextOneofCase.Partner:
          Partner = other.Partner.Clone();
          break;
        case ContextOneofCase.SuperAdmin:
          SuperAdmin = other.SuperAdmin.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceContext Clone() {
      return new ServiceContext(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sso.V1.ServiceContext.Types.Account Account {
      get { return contextCase_ == ContextOneofCase.Account ? (global::Sso.V1.ServiceContext.Types.Account) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.Account;
      }
    }

    /// <summary>Field number for the "partner" field.</summary>
    public const int PartnerFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sso.V1.ServiceContext.Types.Partner Partner {
      get { return contextCase_ == ContextOneofCase.Partner ? (global::Sso.V1.ServiceContext.Types.Partner) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.Partner;
      }
    }

    /// <summary>Field number for the "super_admin" field.</summary>
    public const int SuperAdminFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sso.V1.ServiceContext.Types.SuperAdmin SuperAdmin {
      get { return contextCase_ == ContextOneofCase.SuperAdmin ? (global::Sso.V1.ServiceContext.Types.SuperAdmin) context_ : null; }
      set {
        context_ = value;
        contextCase_ = value == null ? ContextOneofCase.None : ContextOneofCase.SuperAdmin;
      }
    }

    private object context_;
    /// <summary>Enum of possible cases for the "context" oneof.</summary>
    public enum ContextOneofCase {
      None = 0,
      Account = 1,
      Partner = 2,
      SuperAdmin = 3,
    }
    private ContextOneofCase contextCase_ = ContextOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextOneofCase ContextCase {
      get { return contextCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContext() {
      contextCase_ = ContextOneofCase.None;
      context_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (!object.Equals(Partner, other.Partner)) return false;
      if (!object.Equals(SuperAdmin, other.SuperAdmin)) return false;
      if (ContextCase != other.ContextCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contextCase_ == ContextOneofCase.Account) hash ^= Account.GetHashCode();
      if (contextCase_ == ContextOneofCase.Partner) hash ^= Partner.GetHashCode();
      if (contextCase_ == ContextOneofCase.SuperAdmin) hash ^= SuperAdmin.GetHashCode();
      hash ^= (int) contextCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contextCase_ == ContextOneofCase.Account) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (contextCase_ == ContextOneofCase.Partner) {
        output.WriteRawTag(18);
        output.WriteMessage(Partner);
      }
      if (contextCase_ == ContextOneofCase.SuperAdmin) {
        output.WriteRawTag(26);
        output.WriteMessage(SuperAdmin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contextCase_ == ContextOneofCase.Account) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (contextCase_ == ContextOneofCase.Partner) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Partner);
      }
      if (contextCase_ == ContextOneofCase.SuperAdmin) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SuperAdmin);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceContext other) {
      if (other == null) {
        return;
      }
      switch (other.ContextCase) {
        case ContextOneofCase.Account:
          if (Account == null) {
            Account = new global::Sso.V1.ServiceContext.Types.Account();
          }
          Account.MergeFrom(other.Account);
          break;
        case ContextOneofCase.Partner:
          if (Partner == null) {
            Partner = new global::Sso.V1.ServiceContext.Types.Partner();
          }
          Partner.MergeFrom(other.Partner);
          break;
        case ContextOneofCase.SuperAdmin:
          if (SuperAdmin == null) {
            SuperAdmin = new global::Sso.V1.ServiceContext.Types.SuperAdmin();
          }
          SuperAdmin.MergeFrom(other.SuperAdmin);
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Sso.V1.ServiceContext.Types.Account subBuilder = new global::Sso.V1.ServiceContext.Types.Account();
            if (contextCase_ == ContextOneofCase.Account) {
              subBuilder.MergeFrom(Account);
            }
            input.ReadMessage(subBuilder);
            Account = subBuilder;
            break;
          }
          case 18: {
            global::Sso.V1.ServiceContext.Types.Partner subBuilder = new global::Sso.V1.ServiceContext.Types.Partner();
            if (contextCase_ == ContextOneofCase.Partner) {
              subBuilder.MergeFrom(Partner);
            }
            input.ReadMessage(subBuilder);
            Partner = subBuilder;
            break;
          }
          case 26: {
            global::Sso.V1.ServiceContext.Types.SuperAdmin subBuilder = new global::Sso.V1.ServiceContext.Types.SuperAdmin();
            if (contextCase_ == ContextOneofCase.SuperAdmin) {
              subBuilder.MergeFrom(SuperAdmin);
            }
            input.ReadMessage(subBuilder);
            SuperAdmin = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServiceContext message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Account : pb::IMessage<Account> {
        private static readonly pb::MessageParser<Account> _parser = new pb::MessageParser<Account>(() => new Account());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Account> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sso.V1.ServiceContext.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account(Account other) : this() {
          accountId_ = other.accountId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Account Clone() {
          return new Account(this);
        }

        /// <summary>Field number for the "account_id" field.</summary>
        public const int AccountIdFieldNumber = 1;
        private string accountId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AccountId {
          get { return accountId_; }
          set {
            accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Account);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Account other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AccountId != other.AccountId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AccountId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(AccountId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AccountId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Account other) {
          if (other == null) {
            return;
          }
          if (other.AccountId.Length != 0) {
            AccountId = other.AccountId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                AccountId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Partner : pb::IMessage<Partner> {
        private static readonly pb::MessageParser<Partner> _parser = new pb::MessageParser<Partner>(() => new Partner());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Partner> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sso.V1.ServiceContext.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Partner() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Partner(Partner other) : this() {
          partnerId_ = other.partnerId_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Partner Clone() {
          return new Partner(this);
        }

        /// <summary>Field number for the "partner_id" field.</summary>
        public const int PartnerIdFieldNumber = 1;
        private string partnerId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PartnerId {
          get { return partnerId_; }
          set {
            partnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Partner);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Partner other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (PartnerId != other.PartnerId) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (PartnerId.Length != 0) hash ^= PartnerId.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (PartnerId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(PartnerId);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (PartnerId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(PartnerId);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Partner other) {
          if (other == null) {
            return;
          }
          if (other.PartnerId.Length != 0) {
            PartnerId = other.PartnerId;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                PartnerId = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SuperAdmin : pb::IMessage<SuperAdmin> {
        private static readonly pb::MessageParser<SuperAdmin> _parser = new pb::MessageParser<SuperAdmin>(() => new SuperAdmin());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SuperAdmin> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Sso.V1.ServiceContext.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SuperAdmin() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SuperAdmin(SuperAdmin other) : this() {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SuperAdmin Clone() {
          return new SuperAdmin(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SuperAdmin);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SuperAdmin other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SuperAdmin other) {
          if (other == null) {
            return;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GetSessionTransferURLRequest : pb::IMessage<GetSessionTransferURLRequest> {
    private static readonly pb::MessageParser<GetSessionTransferURLRequest> _parser = new pb::MessageParser<GetSessionTransferURLRequest>(() => new GetSessionTransferURLRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSessionTransferURLRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sso.V1.ServiceProviderReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionTransferURLRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionTransferURLRequest(GetSessionTransferURLRequest other) : this() {
      serviceProviderId_ = other.serviceProviderId_;
      Context = other.context_ != null ? other.Context.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionTransferURLRequest Clone() {
      return new GetSessionTransferURLRequest(this);
    }

    /// <summary>Field number for the "service_provider_id" field.</summary>
    public const int ServiceProviderIdFieldNumber = 1;
    private string serviceProviderId_ = "";
    /// <summary>
    /// An ID unique to a service/application (such as a marketplace application ID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceProviderId {
      get { return serviceProviderId_; }
      set {
        serviceProviderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 2;
    private global::Sso.V1.ServiceContext context_;
    /// <summary>
    /// The service context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Sso.V1.ServiceContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSessionTransferURLRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSessionTransferURLRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceProviderId != other.ServiceProviderId) return false;
      if (!object.Equals(Context, other.Context)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceProviderId.Length != 0) hash ^= ServiceProviderId.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceProviderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceProviderId);
      }
      if (context_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceProviderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceProviderId);
      }
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSessionTransferURLRequest other) {
      if (other == null) {
        return;
      }
      if (other.ServiceProviderId.Length != 0) {
        ServiceProviderId = other.ServiceProviderId;
      }
      if (other.context_ != null) {
        if (context_ == null) {
          context_ = new global::Sso.V1.ServiceContext();
        }
        Context.MergeFrom(other.Context);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceProviderId = input.ReadString();
            break;
          }
          case 18: {
            if (context_ == null) {
              context_ = new global::Sso.V1.ServiceContext();
            }
            input.ReadMessage(context_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSessionTransferURLResponse : pb::IMessage<GetSessionTransferURLResponse> {
    private static readonly pb::MessageParser<GetSessionTransferURLResponse> _parser = new pb::MessageParser<GetSessionTransferURLResponse>(() => new GetSessionTransferURLResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSessionTransferURLResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sso.V1.ServiceProviderReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionTransferURLResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionTransferURLResponse(GetSessionTransferURLResponse other) : this() {
      sessionTransferUrl_ = other.sessionTransferUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSessionTransferURLResponse Clone() {
      return new GetSessionTransferURLResponse(this);
    }

    /// <summary>Field number for the "session_transfer_url" field.</summary>
    public const int SessionTransferUrlFieldNumber = 1;
    private string sessionTransferUrl_ = "";
    /// <summary>
    /// The session transfer URL to send the user to (which may result in a redirect to a login screen).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionTransferUrl {
      get { return sessionTransferUrl_; }
      set {
        sessionTransferUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSessionTransferURLResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSessionTransferURLResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionTransferUrl != other.SessionTransferUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionTransferUrl.Length != 0) hash ^= SessionTransferUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionTransferUrl.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionTransferUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionTransferUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionTransferUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSessionTransferURLResponse other) {
      if (other == null) {
        return;
      }
      if (other.SessionTransferUrl.Length != 0) {
        SessionTransferUrl = other.SessionTransferUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionTransferUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
